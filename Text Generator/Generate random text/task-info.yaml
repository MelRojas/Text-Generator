type: edu
files:
  - name: text_generator/text_generator.py
    visible: true
    text: |
      # Write your code here
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/corpus.txt
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest.stage_test import StageTest
      from hstest.test_case import TestCase
      from hstest.check_result import CheckResult
      
      PATH = "test/corpus.txt"
      
      def preprocess():
          with open(PATH, "r", encoding="utf-8") as f:
              return f.read().split()
      
      
      class TextGeneratorTests(StageTest):
          def generate(self):
              return [
                  TestCase(stdin=PATH, time_limit=30000),
                  TestCase(stdin=PATH, time_limit=30000),
                  TestCase(stdin=PATH, time_limit=30000)
              ]
      
          def check(self, reply, attach):
              try:
                  corpus = preprocess()
              except FileNotFoundError:
                  return CheckResult.wrong("File not found at {}. Make sure the file "
                                           "has not been deleted or moved.".format(PATH))
      
              sentences = [sentence for sentence in reply.split('\n') if len(sentence)]
      
              if len(sentences) != 10:
                  return CheckResult.wrong("You should output exactly 10 sentences! "
                                           "Every sentence should be in a new line.")
      
              for sent in sentences:
                  if len(sent.split()) != 10:
                      return CheckResult.wrong(
                          "Every sentence should contain exactly 10 tokens!")
                  if len(set(sent.split())) == 1:
                      return CheckResult.wrong(
                          "Invalid output. All words of a sentence are identical.")
                  for token in sent.split():
                      if token not in corpus:
                          return CheckResult.wrong("Sentences should contain "
                                                   "only words from the corpus!")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          TextGeneratorTests().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import TextGeneratorTests
      
      if __name__ == '__main__':    TextGeneratorTests().run_tests()
    learner_created: false
  - name: text_generator/try_nltk.py
    visible: true
    text: |-
      import nltk
      
      nltk.download("punkt")
      
      sentence = """Green tea is very healthy. The grass was very green in spring. I always drink black tea, but my mother prefers green tea."""
      
      bigramFinder = nltk.collocations.BigramCollocationFinder.from_words(
          nltk.word_tokenize(sentence)
      )
      
      bigram_freq = bigramFinder.ngram_fd.items()
      print(bigram_freq)
      
      n_grams = nltk.probability.FreqDist(nltk.word_tokenize(sentence))
      
      for grams in n_grams:
          print(grams)
      
      print(n_grams.freq("tea"))
    learner_created: true
  - name: text_generator/try_stanza.py
    visible: true
    text: |
      import stanza
      
      nlp = stanza.Pipeline(lang='ko', processors='tokenize,pos')
      
      doc = nlp(input())
      
      print(*[f'{word.text} - {word.upos}' for sent in doc.sentences for word in sent.words], sep='\n')
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11142#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 02 Jul 2024 20:12:20 UTC"
record: 4
